import datetime
import random
from itertools import chain
import sqlite3
from telegram.ext import CommandHandler, Application, MessageHandler, ConversationHandler, filters
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
import logging

weekdays = {0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", 1: "–í—Ç–æ—Ä–Ω–∏–∫", 2: "–°—Ä–µ–¥–∞", 3: "–ß–µ—Ç–≤–µ—Ä–≥",
            4: "–ü—è—Ç–Ω–∏—Ü–∞", 5: "–°—É–±–±–æ—Ç–∞", 6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"}
months = {1: "–Ø–Ω–≤–∞—Ä—å", 2: "–§–µ–≤—Ä–∞–ª—å", 3: "–ú–∞—Ä—Ç",
          4: "–ê–ø—Ä–µ–ª—å", 5: "–ú–∞–π", 6: "–ò—é–Ω—å",
          7: "–ò—é–ª—å", 8: "–ê–≤–≥—É—Å—Ç", 9: "–°–µ–Ω—Ç—è–±—Ä—å",
          10: "–û–∫—Ç—è–±—Ä—å", 11: "–ù–æ—è–±—Ä—å", 12: "–î–µ–∫–∞–±—Ä—å"}
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.DEBUG
)
logger = logging.getLogger(__name__)
reply_keyboard = [['–£—á–∏—Ç–µ–ª—å —Ñ–∏–∑–∏–∫–∏', '–£—á–∏—Ç–µ–ª—å –º–∞—Ç–µ–º–∞—Ç–∏–∫–∏'],
                  ['–ó–∞–≤—É—á', '–î–∏—Ä–µ–∫—Ç–æ—Ä']]
days_keyboard = [['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞'],
                 ['–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']]
weekdays_list = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞',
                 '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞']
task_keyboard = [['–ò—Å—Ç–æ—Ä–∏—è', '–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞']]
markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=False)
task_markup = ReplyKeyboardMarkup(task_keyboard, one_time_keyboard=True)
schedule_change_markup = ReplyKeyboardMarkup(days_keyboard, one_time_keyboard=True)


async def start_question(update, context):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n",
        reply_markup=markup
    )
    return 1


async def first_response(update, context):
    context.user_data['person'] = update.message.text
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
        reply_markup=ReplyKeyboardRemove())
    return 2


async def second_response(update, context):
    person = context.user_data["person"]
    text = update.message.text
    question = f'–í–æ–ø—Ä–æ—Å: –ö–æ–º—É: {person} –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞: {text}'
    with open('Letters.txt', 'w', encoding='utf-8') as r_file:
        r_file.write(question)
        r_file.close()
    await update.message.reply_text("–í–∞—à –≤–æ–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞!")
    context.user_data.clear()
    return ConversationHandler.END


async def stop(update, context):
    await update.message.reply_text("–†–∞–±–æ—Ç–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
                                    reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END


async def help(update, context):
    await update.message.reply_text(
        """–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —É—á–µ–±–µ
        –û–Ω –º–æ–∂–µ—Ç:
        üìÉ –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ /schedule
        üì© –ò–∑–º–µ–Ω—è—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ /changeschedule
        üë®‚Äçüè´ –ó–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã —É—á–∏—Ç–µ–ª—è–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä—É /question
        üìì –î–∞–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–Ω–∞–Ω–∏–π /zadacha
        üîî –ü—Ä–∏—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ /callschedule
        –ù–∞–¥–µ–µ–º—Å—è —á—Ç–æ –≤–∞—à –±–æ—Ç —Å–º–æ–≥ –ø–æ–º–æ—á—å –Ω–∞–º
        –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:""",
        reply_markup=ReplyKeyboardRemove())


async def call_schedule(update, context):
    now = datetime.datetime.now().time()
    breaks = chain(range(841, 851), range(931, 951), range(1031, 1051),
                   range(1131, 1151), range(1221, 1231), range(1311, 1321))
    timed = int(now.strftime("%H%M"))
    if timed not in range(801, 1401):
        timed = '–Ω–µ—É—á–µ–±–Ω–æ–µ –≤—Ä–µ–º—è'
    elif timed in breaks:
        timed = '–ø–µ—Ä–µ–º–µ–Ω–∞'
    else:
        timed = '—É—Ä–æ–∫'
    await update.message.reply_text(
        f"""–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤:
        8:00-8:40 - –ü–µ—Ä–≤—ã–π —É—Ä–æ–∫
        8:40-8:50 - –ü–µ—Ä–µ–º–µ–Ω–∞
        8:50-9:30 - –í—Ç–æ—Ä–æ–π —É—Ä–æ–∫
        9:30-9:50 - –ü–µ—Ä–µ–º–µ–Ω–∞
        9:50-10:30 - –¢—Ä–µ—Ç–∏–π —É—Ä–æ–∫
        10:30-10:50 - –ü–µ—Ä–µ–º–µ–Ω–∞
        10:50-11:30 - –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —É—Ä–æ–∫
        11:30-11:40 - –ü–µ—Ä–µ–º–µ–Ω–∞
        11:40-12:20 - –ü—è—Ç—ã–π —É—Ä–æ–∫
        12:20-12:30 - –ü–µ—Ä–µ–º–µ–Ω–∞
        12:30-13:10 - –®–µ—Å—Ç–æ–π —É—Ä–æ–∫
        13:10-13:20 - –ü–µ—Ä–µ–º–µ–Ω–∞
        13:20-14:00 - –°–µ–¥—å–º–æ–π —É—Ä–æ–∫
        –°–µ–π—á–∞—Å: {timed}"""
    )


async def schedule_func(update, context):
    today = int(datetime.date.today().weekday())
    if today == 5 or today == 6:
        await update.message.reply_text(
            "–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, –º–æ–∂–µ—à—å –æ—Ç–¥—ã—Ö–∞—Ç—å."
        )
    else:
        photo_path = f"schedule_list/{weekdays[today]}.png"
        await context.bot.send_photo(
            update.message.chat_id,
            photo=open(photo_path, 'rb'),
            caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {weekdays[today]}, {datetime.datetime.today().date().day} "
                    f"{months[datetime.datetime.today().date().month]}"
        )


async def start_tasks(update, context):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞—á—É",
        reply_markup=task_markup
    )
    return 1


async def task_handler(update, context):
    if str(update.message.text).lower() == '–∏—Å—Ç–æ—Ä–∏—è':
        con = sqlite3.connect("Questions/Questions_base.db")
        cur = con.cursor()
        result = cur.execute("""Select Questions, Answers FROM Zadachi 
        WHERE Subject = '–∏—Å—Ç–æ—Ä–∏—è'""").fetchall()
        question_id = random.randint(0, len(result) - 1)
        question, answer = result[question_id]
        context.user_data['answer'] = answer
        con.close()
        await update.message.reply_text(
            question
        )
        return 2
    elif str(update.message.text).lower() == '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞':
        first = int(random.randint(3000, 5000))
        second = int(random.randint(3000, 5000))
        multiplier = int(random.randint(10, 30))
        answer = first + second * multiplier
        example = f"{first} + {second} * {multiplier}"
        context.user_data['answer'] = answer
        await update.message.reply_text(
            f"–†–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä: {example}"
        )
        return 3
    else:
        await update.message.reply_text(
            '–í—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—Ä–µ–¥–º–µ—Ç'
        )
        return ConversationHandler.END


async def task_history(update, context):
    if str(update.message.text).lower() == str(context.user_data['answer']):
        await update.message.reply_text(
            '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!'
        )
    else:
        await update.message.reply_text(
            '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!'
        )
    context.user_data.clear()
    return ConversationHandler.END


async def task_math(update, context):
    otvet = context.user_data['answer']
    if int(update.message.text) == otvet:
        await update.message.reply_text(
            '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!'
        )
    else:
        await update.message.reply_text(
            f'–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {str(otvet)}'
        )
    return ConversationHandler.END


async def start_change_schedule(update, context):
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
        reply_markup=schedule_change_markup
    )
    return 1


async def change_schedule(update, context):
    if update.message.text not in weekdays_list:
        await update.message.reply_text(
            "–í—ã–±—Ä–∞–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä"
        )
        return ConversationHandler.END
    else:
        context.user_data['day'] = update.message.text
        await update.message.reply_text(
            "–ü—Ä–∏—à–ª–∏—Ç–µ –Ω–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ñ–æ—Ç–æ"
        )
        return 2


async def image_schedule_handler(update, context):
    photo_file = await update.message.photo[-1].get_file()
    await photo_file.download_to_drive(f"schedule_list/{context.user_data['day']}.png")
    await update.message.reply_text(
        "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ"
    )
    return ConversationHandler.END


async def start_search(update, context):
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞"
    )
    return 1


task_conversation_handler = ConversationHandler(
    entry_points=[CommandHandler('zadacha', start_tasks)],
    states={
        1: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_handler)],
        2: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_history)],
        3: [MessageHandler(filters.TEXT & ~filters.COMMAND, task_math)]
    },
    fallbacks=[CommandHandler('stop', stop)]
)
question_handler = ConversationHandler(
    entry_points=[CommandHandler('question', start_question)],
    states={
        1: [MessageHandler(filters.TEXT & ~filters.COMMAND, first_response)],
        2: [MessageHandler(filters.TEXT & ~filters.COMMAND, second_response)]
    },
    fallbacks=[CommandHandler('stop', stop)]
)
schedule_change_handler = ConversationHandler(
    entry_points=[CommandHandler('changeschedule', start_change_schedule)],
    states={
        1: [MessageHandler(filters.TEXT & ~filters.COMMAND, change_schedule)],
        2: [MessageHandler(filters.PHOTO, image_schedule_handler)]
    },
    fallbacks=[CommandHandler('stop', stop)]
)


def main():
    application = Application.builder().token("TOKEN").build()
    application.add_handler(question_handler)
    application.add_handler(task_conversation_handler)
    application.add_handler(schedule_change_handler)
    application.add_handler(CommandHandler("help", help))
    application.add_handler(CommandHandler("schedule", schedule_func))
    application.add_handler(CommandHandler("callschedule", call_schedule))
    application.run_polling()


if __name__ == '__main__':
    main()
